generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  githubId  String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("admins")
}

model Exam {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100) // e.g., "NEET", "JEE Mains", "JEE Advanced", "CUET"
  year        String   @db.VarChar(10)  // e.g., "2025"
  description String?  @db.VarChar(500) // e.g., "National Eligibility cum Entrance Test"
  hasSubjectCombinations Boolean @default(false) // Whether this exam has subject combinations
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  examDates   ExamDate[]

  @@unique([name, year])
  @@index([isActive])
  @@map("exams")
}

model ExamDate {
  id       String   @id @default(cuid())
  examId   String
  date     DateTime // The actual exam date
  isActive Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exam       Exam        @relation(fields: [examId], references: [id], onDelete: Cascade)
  examShifts ExamShift[]

  @@index([examId])
  @@index([date])
  @@map("exam_dates")
}

model ExamShift {
  id         String   @id @default(cuid())
  examDateId String
  shiftName  String   @db.VarChar(100) // e.g., "Shift 1", "Shift 2", "Morning", "Afternoon"
  startTime  String?  @db.VarChar(20)  // e.g., "09:00 AM"
  endTime    String?  @db.VarChar(20)  // e.g., "12:00 PM"
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  examDate            ExamDate              @relation(fields: [examDateId], references: [id], onDelete: Cascade)
  subjectCombinations SubjectCombination[]

  @@index([examDateId])
  @@map("exam_shifts")
}

model SubjectCombination {
  id          String   @id @default(cuid())
  examShiftId String
  name        String   @db.VarChar(100) // e.g., "PCB", "PCM", "PCMB", "Combination 1"
  subjects    Json     // Array of subjects: ["Physics", "Chemistry", "Biology"]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  examShift ExamShift @relation(fields: [examShiftId], references: [id], onDelete: Cascade)

  @@index([examShiftId])
  @@map("subject_combinations")
}

model AnswerKey {
  id                String   @id @default(cuid())
  examName          String   @db.VarChar(100)
  examYear          String   @db.VarChar(10)
  examDate          DateTime
  shiftName         String   @db.VarChar(100)
  subjectCombination String? @db.VarChar(100)
  subject           String   @db.VarChar(100)
  answers           Json
  isApproved        Boolean  @default(false)
  submittedBy       String?  @db.VarChar(100)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([examName, examYear, examDate, shiftName, subjectCombination, subject])
  @@index([examName, examYear, examDate, shiftName])
  @@index([isApproved])
  @@map("answer_keys")
}

model MarkingScheme {
  id                String @id @default(cuid())
  examName          String @db.VarChar(100)
  examYear          String @db.VarChar(10)
  examDate          DateTime
  shiftName         String @db.VarChar(100)
  subjectCombination String? @db.VarChar(100)
  subject           String @db.VarChar(100)
  correctMarks      Int    @default(4)
  incorrectMarks    Int    @default(-1)
  unattemptedMarks  Int    @default(0)
  totalQuestions    Int    @default(50)
  totalMarks        Int    @default(200)

  @@unique([examName, examYear, examDate, shiftName, subjectCombination, subject])
  @@index([examName, examYear, examDate, shiftName])
  @@map("marking_schemes")
}

model StudentResponse {
  id                String   @id @default(cuid())
  examName          String   @db.VarChar(100)
  examYear          String   @db.VarChar(10)
  examDate          DateTime
  shiftName         String   @db.VarChar(100)
  subjectCombination String? @db.VarChar(100)
  applicationNo     String?  @db.VarChar(50)
  candidateName     String?  @db.VarChar(200)
  rollNo            String?  @db.VarChar(50)
  responses         Json
  analysisResult    Json?
  createdAt         DateTime @default(now())

  @@index([examName, examYear, examDate, shiftName])
  @@index([createdAt])
  @@map("student_responses")
}

model PendingAnswerKey {
  id                String   @id @default(cuid())
  examName          String   @db.VarChar(100)
  examYear          String   @db.VarChar(10)
  examDate          DateTime
  shiftName         String   @db.VarChar(100)
  subjectCombination String? @db.VarChar(100)
  subject           String   @db.VarChar(100)
  answerKeyData     String   @db.Text
  submittedBy       String   @db.VarChar(100)
  createdAt         DateTime @default(now())

  @@index([createdAt])
  @@map("pending_answer_keys")
}
